package io.confluent.kafka.connect.cdc;

import org.apache.kafka.common.config.AbstractConfig;
import org.apache.kafka.common.config.ConfigDef;
import org.apache.kafka.common.config.ConfigDef.Importance;
import org.apache.kafka.common.config.ConfigDef.Range;
import org.apache.kafka.common.config.ConfigDef.Type;

import java.util.Map;

public class CDCSourceConnectorConfig extends AbstractConfig {
  public static final String NAMESPACE_CONFIG = "schema.namespace";
  static final String NAMESPACE_DOC = "The namespace for the schemas generated by the connector.";

  public static final String LOWERCASE_TABLE_NAMES_CONFIG = "schema.lowercase.table.names";
  static final String LOWERCASE_TABLE_NAMES_DOC = "Flag to determine if table names should be lowercase.";

  public static final String LOWERCASE_COLUMN_NAMES_CONFIG = "schema.lowercase.column.names";
  static final String LOWERCASE_COLUMN_NAMES_DOC = "Flag to determine if column names should be lowercase.";

  public static final String KEY_NAME_FORMAT_CONFIG = "schema.key.name.format";
  static final String KEY_NAME_FORMAT_DOC = "Format used to generate the name for the key schema.";

  public static final String VALUE_NAME_FORMAT_CONFIG = "schema.value.name.format";
  static final String VALUE_NAME_FORMAT_DOC = "Format used to generate the name for the value schema.";

  public static final String SCHEMA_CACHE_MS_CONFIG="schema.cache.ms";
  static final String SCHEMA_CACHE_MS_DOC = "The number of milliseconds to cache a Connect schema in memory.";


  public static final String BATCH_SIZE_CONFIG = "batch.size";
  static final String BATCH_SIZE_DOC = "The number of records to return in a batch.";

  public static final String BACKOFF_TIME_MS_CONFIG = "backoff.time.ms";
  static final String BACKOFF_TIME_MS_DOC = "The number of milliseconds to wait when no records are returned.";

  public final String namespace;
  public final boolean lowercaseTableNames;
  public final boolean lowercaseColumnNames;
  public final String keyNameFormat;
  public final String valueNameFormat;
  public final int batchSize;
  public final int backoffTimeMs;
  public final int schemaCacheMs;


  public CDCSourceConnectorConfig(ConfigDef definition, Map<?, ?> originals) {
    super(definition, originals);
    this.namespace = this.getString(NAMESPACE_CONFIG);
    this.lowercaseColumnNames = this.getBoolean(LOWERCASE_COLUMN_NAMES_CONFIG);
    this.lowercaseTableNames = this.getBoolean(LOWERCASE_TABLE_NAMES_CONFIG);
    this.keyNameFormat = this.getString(KEY_NAME_FORMAT_CONFIG);
    this.valueNameFormat = this.getString(VALUE_NAME_FORMAT_CONFIG);
    this.batchSize = this.getInt(BATCH_SIZE_CONFIG);
    this.backoffTimeMs = this.getInt(BACKOFF_TIME_MS_CONFIG);
    this.schemaCacheMs = this.getInt(SCHEMA_CACHE_MS_CONFIG);
  }


  public static ConfigDef config() {
    return new ConfigDef()
        .define(NAMESPACE_CONFIG, Type.STRING, "com.example.data.${sourceDatabaseName}", Importance.HIGH, NAMESPACE_DOC)
        .define(LOWERCASE_COLUMN_NAMES_CONFIG, Type.BOOLEAN, false, Importance.LOW, LOWERCASE_COLUMN_NAMES_DOC)
        .define(LOWERCASE_TABLE_NAMES_CONFIG, Type.BOOLEAN, false, Importance.LOW, LOWERCASE_TABLE_NAMES_DOC)
        .define(KEY_NAME_FORMAT_CONFIG, Type.STRING, "${namespace}.${tableName}Key", Importance.MEDIUM, KEY_NAME_FORMAT_DOC)
        .define(VALUE_NAME_FORMAT_CONFIG, Type.STRING, "${namespace}.${tableName}Value", Importance.MEDIUM, VALUE_NAME_FORMAT_DOC)
        .define(BATCH_SIZE_CONFIG, Type.INT, 512, Range.atLeast(1), Importance.LOW, BATCH_SIZE_DOC)
        .define(BACKOFF_TIME_MS_CONFIG, Type.INT, 1000, Range.atLeast(50), Importance.LOW, BACKOFF_TIME_MS_DOC)
        .define(SCHEMA_CACHE_MS_CONFIG, Type.INT, 5 * 60 * 1000, Range.atLeast(60000), Importance.LOW, SCHEMA_CACHE_MS_DOC);
  }

}
